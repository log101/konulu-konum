---
import '@/styles/globals.css';
import Layout from '../layouts/Layout.astro';
import { Button } from '@/components/ui/button';
import {
  Card,
  CardContent,
  CardFooter,
  CardHeader,
  CardTitle,
} from '@/components/ui/card';

import { CalendarIcon } from '@radix-ui/react-icons';
import { LockClosedIcon } from '@radix-ui/react-icons';

import '../styles/locked-page.css';
---

<Layout>
  <main class="flex flex-col gap-3 my-4 items-center">
    <Card className="w-full">
      <CardHeader>
        <CardTitle>AyÅŸe</CardTitle>
      </CardHeader>
      <CardContent>
        <p>
          Senin iÃ§in bir sÃ¼rpriz hazÄ±rladÄ±m, ama Ã¶nce aÅŸaÄŸÄ±daki konuma gitmen
          lazÄ±m ðŸ˜˜
        </p>
      </CardContent>
      <CardFooter className="gap-2">
        <CalendarIcon />
        <p>5 saat Ã¶nce</p>
      </CardFooter>
    </Card>

    <div id="map" class="w-full h-[450px]"></div>

    <div class="module w-full h-[450px] p-4">
      <div
        class="module-inside flex flex-col justify-center items-center gap-2"
      >
        <Button>
          <LockClosedIcon className="mr-2 h-4 w-4" />Ä°Ã§erik Kilitli
        </Button>
        <Card className="p-2">
          <CardContent className="pb-0 text-center">
            Ä°Ã§eriÄŸi gÃ¶rmek iÃ§in konuma gitmelisin!
          </CardContent>
        </Card>
      </div>
    </div>

    <Button className="w-full">PaylaÅŸ</Button>
  </main>
</Layout>

<script>
  import distance from '../utils/distance';

  let map: google.maps.Map, infoWindow: google.maps.InfoWindow;
  async function initMap(): Promise<void> {
    const { Map } = (await google.maps.importLibrary(
      'maps'
    )) as google.maps.MapsLibrary;
    map = new Map(document.getElementById('map') as HTMLElement, {
      center: { lat: -34.397, lng: 150.644 },
      zoom: 8,
    });

    infoWindow = new google.maps.InfoWindow();

    const locationButton = document.createElement('button');
    const locationInfo = document.createElement('button');

    locationButton.textContent = 'Konumuma Git';
    locationInfo.textContent = 'Mesafe hesaplanÄ±yor...';

    locationButton.classList.add('custom-map-control-button');
    locationInfo.classList.add('custom-map-control-button');

    map.controls[google.maps.ControlPosition.TOP_CENTER].push(locationButton);
    map.controls[google.maps.ControlPosition.BOTTOM_CENTER].push(locationInfo);

    setInterval(
      () =>
        navigator.geolocation.getCurrentPosition(
          (position: GeolocationPosition) => {
            const pos = {
              lat: position.coords.latitude,
              lng: position.coords.longitude,
            };

            const mapPos = map.getCenter();

            const totalDistanceInKM = distance(
              pos.lat,
              pos.lng,
              mapPos?.lat(),
              mapPos?.lng()
            );

            locationInfo.textContent = `Aradaki Mesafe: ${totalDistanceInKM.toFixed(
              0
            )} km`;
          },
          () => {
            handleLocationError(true, infoWindow, map.getCenter()!);
          }
        ),
      5000
    );

    locationButton.addEventListener('click', () => {
      // Try HTML5 geolocation.
      if (navigator.geolocation) {
        navigator.geolocation.getCurrentPosition(
          (position: GeolocationPosition) => {
            const pos = {
              lat: position.coords.latitude,
              lng: position.coords.longitude,
            };

            // infoWindow.setPosition(pos);
            // infoWindow.setContent('Location found.');
            // infoWindow.open(map);
            map.setCenter(pos);
          },
          () => {
            handleLocationError(true, infoWindow, map.getCenter()!);
          }
        );
      } else {
        // Browser doesn't support Geolocation
        handleLocationError(false, infoWindow, map.getCenter()!);
      }
    });
  }

  function handleLocationError(
    browserHasGeolocation: boolean,
    infoWindow: google.maps.InfoWindow,
    pos: google.maps.LatLng
  ) {
    infoWindow.setPosition(pos);
    infoWindow.setContent(
      browserHasGeolocation
        ? 'Error: Konumunuz tespit edilemedi.'
        : 'Error: TarayÄ±cÄ±nÄ±z konum tespitini desteklemiyor.'
    );
    infoWindow.open(map);
  }

  initMap();
</script>

<style>
  .module {
    display: grid;
    place-items: center;
    position: relative;
    overflow: hidden;
  }

  .module::before {
    content: '';
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    position: absolute;
    background-image: url('/sample-selfie.webp');
    background-position: center;
    background-repeat: no-repeat;
    filter: blur(20px);
  }

  .module-inside {
    position: relative;
  }
</style>
