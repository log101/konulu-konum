---
import '@/styles/globals.css';
import Layout from '../layouts/Layout.astro';
import { Button } from '@/components/ui/button';
import {
  Card,
  CardContent,
  CardFooter,
  CardHeader,
  CardTitle,
} from '@/components/ui/card';

import { CalendarIcon } from '@radix-ui/react-icons';

import '../styles/locked-page.css';
import LocationButton from '@/components/LockedContent';
---

<Layout>
  <main class="flex flex-col gap-3 my-4 items-center">
    <Card className="w-full">
      <CardHeader>
        <CardTitle>Abdurrahman</CardTitle>
      </CardHeader>
      <CardContent>
        <p>Aşağıdaki konuma gitmen gerekiyor.</p>
      </CardContent>
      <CardFooter className="gap-2">
        <CalendarIcon />
        <p>5 saat önce</p>
      </CardFooter>
    </Card>

    <div id="map" class="w-full h-[450px]"></div>

    <LocationButton client:load />
  </main>

  <Button className="w-full">Paylaş</Button>
</Layout>

<script>
  // TODO: Move script to a seperate file
  import L from 'leaflet';
  import type { LatLngTuple, Marker, LocationEvent, ErrorEvent } from 'leaflet';

  const TARGET_LOCATION: LatLngTuple = [41.01907795861253, 29.01715377829709];

  var map = L.map('map').setView(TARGET_LOCATION, 13);

  L.tileLayer('https://tile.openstreetmap.org/{z}/{x}/{y}.png', {
    maxZoom: 19,
    attribution:
      '&copy; <a href="http://www.openstreetmap.org/copyright">OpenStreetMap</a>',
  }).addTo(map);

  var targetLocationIcon = L.icon({
    iconUrl: 'goal.svg',
    iconSize: [32, 32],
  });

  L.marker(TARGET_LOCATION, { icon: targetLocationIcon }).addTo(map);

  var currentLocationIcon = L.icon({
    iconUrl: 'blue-dot.png',
    iconSize: [32, 32],
  });

  let currentLocationMarker: Marker;

  function onLocationFound(e: LocationEvent) {
    var radius = e.accuracy;

    if (currentLocationMarker) {
      currentLocationMarker.setLatLng(e.latlng);
    } else {
      currentLocationMarker = L.marker(e.latlng, { icon: currentLocationIcon });
      currentLocationMarker.addTo(map);
    }
  }

  map.on('locationfound', onLocationFound);

  function onLocationError(e: ErrorEvent) {
    alert(e.message);
  }

  map.on('locationerror', onLocationError);

  // @ts-expect-error extend object
  L.Control.GoToCurrentLocation = L.Control.extend({
    onAdd: function (map: L.Map) {
      const locationButton = document.createElement('button');

      locationButton.textContent = 'Konumuma Git';

      locationButton.classList.add('custom-map-control-button');

      locationButton.addEventListener('click', () => {
        map.locate({ setView: true, maxZoom: 16 });
      });

      return locationButton;
    },

    onRemove: function (map: L.Map) {
      // Nothing to do here
    },
  });

  // @ts-expect-error extend object
  L.Control.GoToTargetLocation = L.Control.extend({
    onAdd: function (map: L.Map) {
      const locationButton = document.createElement('button');

      locationButton.textContent = 'Hedefe Git';

      locationButton.classList.add('custom-map-control-button');

      locationButton.addEventListener('click', () => {
        map.setView(TARGET_LOCATION, 16);
      });

      return locationButton;
    },

    onRemove: function (map: L.Map) {
      // Nothing to do here
    },
  });

  // @ts-expect-error extend object
  L.control.currentLocation = function (opts) {
    // @ts-expect-error extend object
    return new L.Control.GoToCurrentLocation(opts);
  };

  // @ts-expect-error extend object
  L.control.targetLocation = function (opts) {
    // @ts-expect-error extend object
    return new L.Control.GoToTargetLocation(opts);
  };

  // @ts-expect-error extend object
  L.control.currentLocation({ position: 'bottomleft' }).addTo(map);

  // @ts-expect-error extend object
  L.control.targetLocation({ position: 'bottomleft' }).addTo(map);
</script>
